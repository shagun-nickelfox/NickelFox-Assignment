// Generated by view binder compiler. Do not edit!
package com.example.nickelfoxassignment.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.nickelfoxassignment.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView cvCrashlytics;

  @NonNull
  public final CardView cvFirstAssignment;

  @NonNull
  public final CardView cvMarkerClustering;

  @NonNull
  public final CardView cvOnBoarding;

  @NonNull
  public final CardView cvSharedTransition;

  @NonNull
  public final CardView cvViewPager;

  @NonNull
  public final MyToolbarBinding toolbar;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull CardView cvCrashlytics,
      @NonNull CardView cvFirstAssignment, @NonNull CardView cvMarkerClustering,
      @NonNull CardView cvOnBoarding, @NonNull CardView cvSharedTransition,
      @NonNull CardView cvViewPager, @NonNull MyToolbarBinding toolbar) {
    this.rootView = rootView;
    this.cvCrashlytics = cvCrashlytics;
    this.cvFirstAssignment = cvFirstAssignment;
    this.cvMarkerClustering = cvMarkerClustering;
    this.cvOnBoarding = cvOnBoarding;
    this.cvSharedTransition = cvSharedTransition;
    this.cvViewPager = cvViewPager;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cvCrashlytics;
      CardView cvCrashlytics = ViewBindings.findChildViewById(rootView, id);
      if (cvCrashlytics == null) {
        break missingId;
      }

      id = R.id.cvFirstAssignment;
      CardView cvFirstAssignment = ViewBindings.findChildViewById(rootView, id);
      if (cvFirstAssignment == null) {
        break missingId;
      }

      id = R.id.cvMarkerClustering;
      CardView cvMarkerClustering = ViewBindings.findChildViewById(rootView, id);
      if (cvMarkerClustering == null) {
        break missingId;
      }

      id = R.id.cvOnBoarding;
      CardView cvOnBoarding = ViewBindings.findChildViewById(rootView, id);
      if (cvOnBoarding == null) {
        break missingId;
      }

      id = R.id.cvSharedTransition;
      CardView cvSharedTransition = ViewBindings.findChildViewById(rootView, id);
      if (cvSharedTransition == null) {
        break missingId;
      }

      id = R.id.cvViewPager;
      CardView cvViewPager = ViewBindings.findChildViewById(rootView, id);
      if (cvViewPager == null) {
        break missingId;
      }

      id = R.id.toolbar;
      View toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }
      MyToolbarBinding binding_toolbar = MyToolbarBinding.bind(toolbar);

      return new ActivityMainBinding((ConstraintLayout) rootView, cvCrashlytics, cvFirstAssignment,
          cvMarkerClustering, cvOnBoarding, cvSharedTransition, cvViewPager, binding_toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
